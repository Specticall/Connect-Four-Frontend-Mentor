{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,Q,S,C,C,C,E,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,U,I,E,A,G,E,GCEA,IAcA,EACA,EAfI,EAAU,CAAC,EAcf,EAbA,SAAkB,CAAK,EAErB,IAAK,IADD,EAAO,OAAO,IAAA,CAAK,GACd,EAAI,EAAG,EAAI,EAAK,MAAA,CAAQ,IAC/B,CAAO,CAAC,CAAI,CAAC,EAAE,CAAC,CAAG,CAAK,CAAC,CAAI,CAAC,EAAE,CAAC,AAErC,EASA,EARA,SAAiB,CAAE,EACjB,IAAI,EAAW,CAAO,CAAC,EAAG,CAC1B,GAAI,AAAY,MAAZ,EACF,MAAM,AAAI,MAAM,oCAAsC,GAExD,OAAO,CACT,C,GCfA,AAAA,EAAA,SAAA,QAAA,CAA8C,KAAK,KAAA,CAAM,irB,E,S,E,SEkDlD,MAAM,EAAS,IAlDtB,MACE,aAAc,CAAC,CAEf,sCAAsC;AACtC,8CAA8C;AAC9C,4BAA4B;AAC5B,gCAAgC;AAChC,wBAAwB,CAAG,CAAE,EAAS,CAAC,CAAE,CACvC,mBAAmB;AACnB,iCAAiC;AACjC,iCAAiC;AACjC,KAAK;AACL,IAAI,EAAS,EAAE,CACf,IAAK,IAAI,EAAI,EACX,AADqB,EAAI,EAAI,MAAA,EACzB,EAAO,MAAA,GAAW,EADe,IAAK,CAG1C,GAAI,AAAW,MAAX,CAAG,CAAC,EAAE,CAAU,CAClB,EAAS,EAAE,CAEX,QACF,CAEA,GAAU,IAAN,GAKA,CAAG,CAAC,EAAI,EAAE,CAAC,MAAA,GAAW,CAAG,CAAC,EAAE,CAAC,MAAA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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-7c273284fd30e795.js","js/main.js","js/logic.js","js/gameboard.js","js/images.js","node_modules/@parcel/runtime-js/lib/runtime-9952f0d1095e9e6b.js","node_modules/@parcel/runtime-js/lib/runtime-4deb0a580d704364.js","node_modules/@parcel/runtime-js/lib/runtime-8058923cb9c6ea76.js","node_modules/@parcel/runtime-js/lib/runtime-05d47793e9377c1c.js","node_modules/@parcel/runtime-js/lib/runtime-cabed180484ece48.js","node_modules/@parcel/runtime-js/lib/runtime-43c6adba98cecd8e.js","js/game.js","node_modules/@parcel/runtime-js/lib/runtime-2f652ad6cb1ea557.js","node_modules/@parcel/runtime-js/lib/runtime-9aaac0fa284e66d3.js","node_modules/@parcel/runtime-js/lib/runtime-f0fb58f9a460aafa.js","node_modules/@parcel/runtime-js/lib/runtime-852c517da7cb0e68.js","js/navigation.js"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire1811\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire1811\"] = parcelRequire;\n}\nparcelRequire.register(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\n$parcel$export(module.exports, \"resolve\", () => $18c11f3350a906ea$export$f7ad0328861e2f03, (v) => $18c11f3350a906ea$export$f7ad0328861e2f03 = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = {};\nfunction $18c11f3350a906ea$var$register(pairs) {\n    var keys = Object.keys(pairs);\n    for(var i = 0; i < keys.length; i++)$18c11f3350a906ea$var$mapping[keys[i]] = pairs[keys[i]];\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping[id];\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return resolved;\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $527f4972d55723aa$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(JSON.parse('{\"jafTj\":\"game.db12de88.js\",\"fwfJW\":\"counter-red-large.1b4f990d.svg\",\"cx2Hk\":\"counter-yellow-large.93af5fd3.svg\",\"934QX\":\"counter-red-small.ae91ef0e.svg\",\"4dB29\":\"counter-yellow-small.a6641bf4.svg\",\"gUdph\":\"board-layer-white-large.ecccfb19.svg\",\"9ppCi\":\"board-layer-white-small.a9fe7f83.svg\",\"1mcSd\":\"turn-background-red.e290ee2b.svg\",\"6bKVC\":\"turn-background-yellow.06d012d8.svg\",\"gsDR2\":\"marker-red.a1d62ded.svg\",\"azkAt\":\"marker-yellow.e5fb14af.svg\",\"2w5Dh\":\"rules.b0ba6b5e.js\"}'));\n\nparcelRequire(\"ic7rk\");\nparcelRequire(\"9NZOq\");\nclass $f90dcfcb5d2eec26$var$Logic {\n    constructor(){}\n    // Returns an array of indexes of same\n    // and consecutive elements (also the string);\n    // If not found return false\n    // Uses sliding window technique\n    containsWinningPosition(arr, length = 4) {\n        // Cleans the array\n        // const cleanedArr = arr.filter(\n        //   (element) => element !== \" \"\n        // );\n        let result = [];\n        for(let r = 0, l = 0; r < arr.length; r++){\n            if (result.length === length) break;\n            if (arr[r] === \" \") {\n                result = [];\n                l = r;\n                continue;\n            }\n            if (r === 0) {\n                result.push([\n                    arr[r].player,\n                    arr[r].coords\n                ]);\n                continue;\n            }\n            if (arr[r - 1].player === arr[r].player) {\n                result.push([\n                    arr[r].player,\n                    arr[r].coords\n                ]);\n                continue;\n            }\n            result = [];\n            l = r;\n            result.push([\n                arr[r].player,\n                arr[r].coords\n            ]);\n        }\n        return result.length === length ? result : false;\n    }\n    calcFallTime(y) {\n        return Math.sqrt(2 * y) / 7;\n    }\n    wait(seconds) {\n        return new Promise((resolve)=>{\n            setTimeout(resolve, seconds * 1000);\n        });\n    }\n}\nconst $f90dcfcb5d2eec26$export$9db256c878ff5dca = new $f90dcfcb5d2eec26$var$Logic();\n\n\n\nvar $5a1cf74312d50894$exports = {};\n\n$5a1cf74312d50894$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"fwfJW\"), import.meta.url).toString();\n\n\nvar $addae391ba728354$exports = {};\n\n$addae391ba728354$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"cx2Hk\"), import.meta.url).toString();\n\n\nvar $8cf1fddada993cad$exports = {};\n\n$8cf1fddada993cad$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"934QX\"), import.meta.url).toString();\n\n\nvar $47ed43296e597087$exports = {};\n\n$47ed43296e597087$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"4dB29\"), import.meta.url).toString();\n\n\nvar $bc6e4839d4562229$exports = {};\n\n$bc6e4839d4562229$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"gUdph\"), import.meta.url).toString();\n\n\nvar $a9852a3dd3340b30$exports = {};\n\n$a9852a3dd3340b30$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"9ppCi\"), import.meta.url).toString();\n\n\n// Handles the images (changes on certain viewports)\nclass $c5c6c3e8862acf74$var$ResponsiveClass {\n    #boardContent = document.querySelector(\".board__content\");\n    #boardWhiteDOM = document.querySelector(\".board__white\");\n    #currentViewport;\n    constructor(){\n        this.#detectViewport();\n        // Listen to any change in viewport\n        window.addEventListener(\"resize\", this.#detectViewport.bind(this));\n    }\n    #detectViewport() {\n        const viewportNow = window.innerWidth < 500 ? \"MOBILE\" : \"DESKTOP\";\n        // If there is no change in viewport then return\n        if (this.#currentViewport === viewportNow) return;\n        // Sets the viewport on the object itself\n        this.#currentViewport = viewportNow;\n        // Change the cell image based on the viewport size\n        this.#changeImages();\n    }\n    #changeImages() {\n        // Change Cells\n        [\n            ...this.#boardContent.children\n        ].forEach((cell)=>{\n            const player = cell.dataset.player;\n            cell.children[0].src = player === \"1\" ? this.redCell : this.yellowCell;\n        });\n        // Change board\n        this.#boardWhiteDOM.src = this.boardWhite;\n    }\n    get boardWhite() {\n        return this.#currentViewport === \"DESKTOP\" ? (0, (/*@__PURE__*/$parcel$interopDefault($bc6e4839d4562229$exports))) : (0, (/*@__PURE__*/$parcel$interopDefault($a9852a3dd3340b30$exports)));\n    }\n    get redCell() {\n        return this.#currentViewport === \"DESKTOP\" ? (0, (/*@__PURE__*/$parcel$interopDefault($5a1cf74312d50894$exports))) : (0, (/*@__PURE__*/$parcel$interopDefault($8cf1fddada993cad$exports)));\n    }\n    get yellowCell() {\n        return this.#currentViewport === \"DESKTOP\" ? (0, (/*@__PURE__*/$parcel$interopDefault($addae391ba728354$exports))) : (0, (/*@__PURE__*/$parcel$interopDefault($47ed43296e597087$exports)));\n    }\n}\nclass $c5c6c3e8862acf74$export$b691916706e0e9cc {\n    constructor(player, coords){\n        this.player = player;\n        this.coords = coords;\n    }\n}\nconst $c5c6c3e8862acf74$export$6c746a5570b8b35c = new $c5c6c3e8862acf74$var$ResponsiveClass();\n\n\n\nvar $871f72d88f93c184$exports = {};\n\n$871f72d88f93c184$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"1mcSd\"), import.meta.url).toString();\n\n\nvar $382bfb8594a9b0b8$exports = {};\n\n$382bfb8594a9b0b8$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"6bKVC\"), import.meta.url).toString();\n\n\nvar $be27cafe66611cda$exports = {};\n\n$be27cafe66611cda$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"gsDR2\"), import.meta.url).toString();\n\n\nvar $b72656ca5a11d622$exports = {};\n\n$b72656ca5a11d622$exports = new URL((parcelRequire(\"27Lyk\")).resolve(\"azkAt\"), import.meta.url).toString();\n\n\nclass $472cb95d11c6e757$var$GameClass {\n    // At the start of the game, it is player 1's turn\n    #boardInput = document.querySelector(\".board__input\");\n    #playerTimer = document.querySelector(\".current__player--timer\");\n    #playerTurnText = document.querySelector(\".current__player--indicator\");\n    #playerTurnImage = document.querySelector(\".current__player--image\");\n    #playerTurnContainer = document.querySelector(\".current__player\");\n    #dropIndicator = document.querySelector(\".drop-indicator\");\n    #backdrop = document.querySelector(\".backdrop\");\n    #backdropBottom = document.querySelector(\".backdrop__bottom\");\n    #player1PointDOM = document.querySelector(\".score[data-player='1']\");\n    #player2PointDOM = document.querySelector(\".score[data-player='2']\");\n    #playerWinScreen = document.querySelector(\".player__winner\");\n    #restartBtn = document.querySelector(\".btn__restart\");\n    #playAgainBtn = document.querySelector(\".btn__again\");\n    // Player state\n    #currentPlayer = 1;\n    //Timer\n    #time = 30;\n    #timer;\n    // Points\n    #pointPlayer1 = 0;\n    #pointPlayer2 = 0;\n    constructor(){\n        this.#restartBtn.addEventListener(\"click\", this.#resetGame.bind(this));\n        this.#playAgainBtn.addEventListener(\"click\", this.#restartGame.bind(this));\n        // Start game after everything finishes loading.\n        window.addEventListener(\"DOMContentLoaded\", ()=>{\n            this.startGame();\n        });\n    }\n    startGame() {\n        // Clears the board\n        (0, $103370147f467e2d$export$e14f22bc981ebf44).init(6, 7);\n        // Sets the timer\n        this.#playerTimer.textContent = `${this.#time}S`;\n        // Sets the timer\n        this.startTimer();\n        this.#setTurnIndicator();\n        // Display the drop indicator\n        this.#dropIndicator.classList.remove(\"hidden\");\n        // set backdrop color to default\n        this.#backdrop.classList.remove(\"yellow\");\n        this.#backdrop.classList.remove(\"red\");\n        this.#backdropBottom.classList.remove(\"yellow\");\n        this.#backdropBottom.classList.remove(\"red\");\n        // Sets the player score\n        this.#player1PointDOM.textContent = this.#pointPlayer1;\n        this.#player2PointDOM.textContent = this.#pointPlayer2;\n        // Adds the move event listener (for top indicator)\n        this.#boardInput.addEventListener(\"mousemove\", this.#moveDropIndicator.bind(this));\n    }\n    startTimer() {\n        this.#timer = setInterval(()=>{\n            // Reduce timer\n            this.#time--;\n            // Updates the DOM timer with the object timer\n            this.#playerTimer.textContent = `${this.#time}S`;\n            // Stop timer if it hits 0\n            if (this.#time !== -1) return;\n            this.stopTimer();\n            this.switchTurns();\n        }, 1000);\n    }\n    stopTimer() {\n        clearInterval(this.#timer);\n    }\n    #restartGame() {\n        // Resets the timer to default position\n        this.#time = 30;\n        this.#playerTimer.textContent = `${this.#time}S`;\n        this.stopTimer();\n        // Initializes the game\n        this.startGame();\n        // Toggle from the botto win screen to the turn screen\n        this.#playerTurnContainer.classList.remove(\"hidden\");\n        this.#playerTurnContainer.classList.remove(\"disappear\");\n        this.#playerWinScreen.classList.add(\"hidden\");\n        this.#playerWinScreen.classList.remove(\"appear\");\n        // Remove player icon animation\n        //prettier-ignore\n        document.querySelector(`.player__score[data-player=\"1\"] > .player__icon`).classList.remove(\"iconAnimate\");\n        //prettier-ignore\n        document.querySelector(`.player__score[data-player=\"2\"] > .player__icon`).classList.remove(\"iconAnimate\");\n    }\n    // Restart + Reset score\n    #resetGame() {\n        this.#pointPlayer1 = 0;\n        this.#pointPlayer2 = 0;\n        this.#restartGame();\n    }\n    // API purposes\n    restart() {\n        this.#restartGame();\n    }\n    reset() {\n        this.#resetGame();\n    }\n    switchTurns() {\n        // Switch player turn\n        this.#currentPlayer = this.#currentPlayer === 1 ? 2 : 1;\n        // Restarts the timer\n        clearInterval(this.#timer);\n        this.#time = 30;\n        this.#playerTimer.textContent = `${this.#time}S`;\n        this.startTimer();\n        // Display the current player\n        this.#setTurnIndicator();\n    }\n    addPointToPlayer(player) {\n        player === 1 ? this.#pointPlayer1++ : this.#pointPlayer2++;\n        // Sets the player score\n        this.#player1PointDOM.textContent = this.#pointPlayer1;\n        this.#player2PointDOM.textContent = this.#pointPlayer2;\n    }\n    // Switch the turn indicator to current player\n    #setTurnIndicator() {\n        // Change text\n        this.#playerTurnText.textContent = `PLAYER ${this.#currentPlayer}'S TURN`;\n        this.#playerTurnText.style.color = this.#currentPlayer === 1 ? \"var(--clr-white)\" : \"var(--clr-black)\";\n        this.#playerTimer.style.color = this.#currentPlayer === 1 ? \"var(--clr-white)\" : \"var(--clr-black)\";\n        // Change image\n        this.#playerTurnImage.src = this.#currentPlayer === 1 ? (0, (/*@__PURE__*/$parcel$interopDefault($871f72d88f93c184$exports))) : (0, (/*@__PURE__*/$parcel$interopDefault($382bfb8594a9b0b8$exports)));\n        this.#dropIndicator.src = this.#currentPlayer === 1 ? (0, (/*@__PURE__*/$parcel$interopDefault($be27cafe66611cda$exports))) : (0, (/*@__PURE__*/$parcel$interopDefault($b72656ca5a11d622$exports)));\n    }\n    #moveDropIndicator(e) {\n        const cell = e.target.closest(\".cell__hidden\");\n        if (!cell) return;\n        const x = cell.dataset.coords.split(\",\")[1];\n        this.#dropIndicator.style.setProperty(\"--x\", x);\n    }\n    displayWinScreen(playerWinner = \"tie\") {\n        // switch from turn display to win display\n        this.#playerTurnContainer.classList.add(\"hidden\");\n        this.#playerWinScreen.classList.remove(\"hidden\");\n        if (playerWinner === \"tie\") {\n            this.#playerWinScreen.querySelector(\"p\").textContent = `IT'S A`;\n            this.#playerWinScreen.querySelector(\"h2\").textContent = \"DRAW\";\n            return;\n        }\n        // Change the players name\n        this.#playerWinScreen.querySelector(\"p\").textContent = `PLAYER ${playerWinner}`;\n        this.#backdrop.classList.add(playerWinner === 1 ? \"red\" : \"yellow\");\n        this.#backdropBottom.classList.add(playerWinner === 1 ? \"red\" : \"yellow\");\n        // Animate Player Icon Bouncing\n        const icon = document.querySelector(`.player__score[data-player=\"${playerWinner}\"] > .player__icon`);\n        icon.classList.add(\"iconAnimate\");\n    }\n    get player() {\n        return this.#currentPlayer;\n    }\n}\nconst $472cb95d11c6e757$export$119d2a93e2780362 = new $472cb95d11c6e757$var$GameClass();\n\n\nclass $103370147f467e2d$var$GameboardClass {\n    #gameboardDOM = document.querySelector(\".board__content\");\n    #gameboardInput = document.querySelector(\".board__input\");\n    #dropIndicator = document.querySelector(\".drop-indicator\");\n    gameboard;\n    // Used to stop inputs from happening whenever there is an animation.\n    #canInputCells = true;\n    constructor(){\n        // this.init(6, 7);\n        // Event listener that registers input\n        this.#gameboardInput.addEventListener(\"click\", this.#clickCell.bind(this));\n    // //////// DEV CODE ///////////////\n    // this.dropCell(3, 1, 2);\n    ////////////////////////////////////\n    }\n    // Initialize the board.\n    // Note that height and width SHOULD NOT BE CHANGED.\n    async init(height, width) {\n        await this.#clearBoard();\n        // Initialize empty gameboard\n        this.gameboard = [\n            ...Array(height)\n        ].map((el)=>Array(width).fill(\" \"));\n        // Automatically div elements that can be clicked.\n        for(let y = 0; y < height; y++)for(let x = 0; x < width; x++){\n            const html = `\r\n        <div class=\"cell__hidden\" data-coords=\"${y},${x}\"></div>\r\n        `;\n            this.#gameboardInput.insertAdjacentHTML(\"beforeend\", html);\n        }\n        // Enables cell input\n        this.#canInputCells = true;\n    }\n    #clearBoard() {\n        return new Promise(async (resolve)=>{\n            this.#gameboardInput.innerHTML = \"\";\n            [\n                ...this.#gameboardDOM.children\n            ].forEach((cell)=>{\n                cell.style.opacity = \"0\";\n            });\n            await (0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).wait(0.25);\n            this.#gameboardDOM.innerHTML = \"\";\n            resolve();\n        });\n    }\n    ////////////////////////////////////\n    get #height() {\n        return this.gameboard.length;\n    }\n    get #width() {\n        return this.gameboard[0].length;\n    }\n    #rowOf(y, x) {\n        return this.gameboard[y];\n    }\n    #columnOf(y, x) {\n        return [\n            ...Array(this.#height)\n        ].map((_, i)=>this.gameboard[i][x]);\n    }\n    // Diagonal right is \"\\\" (Down + Right)\n    #diagonalRightOf(yCoords, xCoords) {\n        let result = [\n            this.gameboard[yCoords][xCoords]\n        ];\n        let y = yCoords, x = xCoords;\n        // Iterate until topleft -> input (unshift) into array\n        while(x > 0 && y > 0){\n            y--;\n            x--;\n            result.unshift(this.gameboard[y][x]);\n        }\n        // Resets the position variables\n        y = yCoords;\n        x = xCoords;\n        // Iterate until bottomright ->  input (push) into array\n        while(x < this.#width - 1 && y < this.#height - 1){\n            y++;\n            x++;\n            result.push(this.gameboard[y][x]);\n        }\n        return result;\n    }\n    // Diagonal left is \"/\" (Down + Left)\n    #diagonalLeftOf(yCoords, xCoords) {\n        let result = [\n            this.gameboard[yCoords][xCoords]\n        ];\n        let y = yCoords, x = xCoords;\n        // Iterate until top right\n        while(x < this.#width - 1 && y > 0){\n            y--;\n            x++;\n            result.unshift(this.gameboard[y][x]);\n        }\n        // Resets the position variables\n        y = yCoords;\n        x = xCoords;\n        // Iterate until bottom left\n        while(x > 0 && y < this.#height - 1){\n            y++;\n            x--;\n            result.push(this.gameboard[y][x]);\n        }\n        return result;\n    }\n    ////////////////////////////////////\n    // NOTE : New Cells will always fill the bottom of the column first\n    async dropCell(y, x, player) {\n        this.#canInputCells = false;\n        // The i >= -1 is so that the loop will go from the height -> -1\n        // If it ever hits -1 it means that there are no longer any available space on the column\n        // Checks for the highest available spot on the column\n        for(let i = this.#height - 1; i >= -1; i--){\n            // Checks if the board is already filled to the top\n            if (i === -1) {\n                this.#canInputCells = true;\n                return;\n            }\n            // If current el on column is empty the continue\n            if (this.gameboard[i][x] !== \" \") continue;\n            // If current el IS NOT empty then set it to the y position\n            y = i;\n            break;\n        }\n        // Insert the player input into the object array\n        this.gameboard[y][x] = new (0, $c5c6c3e8862acf74$export$b691916706e0e9cc)(player, [\n            y,\n            x\n        ]);\n        // Waits for cell render animation to finish\n        await this.#renderCell(y, x, player);\n        // Checks if the recent move created a winning position\n        // 0 -> Player // 1 -> Winning Cell Coords\n        const winner = this.#checkWin([\n            y,\n            x\n        ]);\n        if (winner) this.#showWin(winner);\n        else {\n            // Re-enable input\n            this.#canInputCells = true;\n            (0, $472cb95d11c6e757$export$119d2a93e2780362).switchTurns();\n        }\n    }\n    async #renderCell(y, x, player) {\n        return new Promise((resolve)=>{\n            const cellColor = player === 1 ? (0, $c5c6c3e8862acf74$export$6c746a5570b8b35c).redCell : (0, $c5c6c3e8862acf74$export$6c746a5570b8b35c).yellowCell;\n            const cellHtml = `\r\n      <div class=\"cell\" data-coords=\"${y},${x}\" data-x=\"${x}\", data-y=\"${y}\" data-player=\"${player}\">\r\n        <img src=${cellColor} alt=\"cell\"/>\r\n      </div>\r\n      `;\n            this.#gameboardDOM.insertAdjacentHTML(\"afterbegin\", cellHtml);\n            const newCell = document.querySelector(`[data-coords=\"${y},${x}\"]`);\n            newCell.style.setProperty(\"--x\", x);\n            newCell.style.setProperty(\"--y\", y);\n            newCell.style.setProperty(\"--fall-time\", `${(0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).calcFallTime(y)}s`);\n            newCell.addEventListener(\"animationend\", resolve);\n        });\n    }\n    #clickCell(e) {\n        const cell = e.target.closest(\".cell__hidden\");\n        if (!cell) return;\n        if (!this.#canInputCells) return;\n        const [y, x] = cell.dataset.coords.split(\",\").map((el)=>Number(el));\n        this.dropCell(y, x, (0, $472cb95d11c6e757$export$119d2a93e2780362).player);\n    }\n    // ////////////////////////////////\n    //prettier-ignore\n    #checkWin(recentPlacement) {\n        const [y, x] = recentPlacement;\n        // Checks winning conditions.\n        const result = (0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).containsWinningPosition(this.#rowOf(y, x)) || (0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).containsWinningPosition(this.#columnOf(y, x)) || (0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).containsWinningPosition(this.#diagonalRightOf(y, x)) || (0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).containsWinningPosition(this.#diagonalLeftOf(y, x)) || false;\n        const draw = this.#checkDraw();\n        if (draw) return;\n        return result;\n    }\n    async #showWin(winner = \"tie\") {\n        // If the game results in a draw :\n        if (winner === \"tie\") {\n            (0, $472cb95d11c6e757$export$119d2a93e2780362).displayWinScreen();\n            return;\n        }\n        // creates an array with the only the coordinates of the winning cells.\n        const winningCoords = winner.map((el)=>el[1]);\n        // Hide dropIndicator\n        this.#dropIndicator.classList.add(\"hidden\");\n        // Mark & animate the winning cells\n        await this.#markWinningCell(winningCoords);\n        await (0, $f90dcfcb5d2eec26$export$9db256c878ff5dca).wait(0.2);\n        // Add point\n        const playerWinner = winner[0][0];\n        (0, $472cb95d11c6e757$export$119d2a93e2780362).addPointToPlayer(playerWinner);\n        // Stop timer\n        (0, $472cb95d11c6e757$export$119d2a93e2780362).stopTimer();\n        (0, $472cb95d11c6e757$export$119d2a93e2780362).displayWinScreen(playerWinner);\n    }\n    #markWinningCell(winner) {\n        return new Promise((resolve)=>{\n            let i = winner.length - 1;\n            const addMarkings = setInterval(()=>{\n                // get data\n                const [y, x] = winner[i];\n                const cell = document.querySelector(`[data-coords=\"${y},${x}\"]`);\n                // add class\n                cell.classList.add(\"cell__win\");\n                // decrement counter\n                i--;\n                // stopping condition\n                if (i >= 0) return;\n                clearInterval(addMarkings);\n                resolve();\n            }, 200);\n        });\n    }\n    #checkDraw() {\n        if (!this.gameboard.every((el)=>el.every((el)=>el !== \" \"))) return;\n        this.#showWin();\n        return true;\n    }\n}\nconst $103370147f467e2d$export$e14f22bc981ebf44 = new $103370147f467e2d$var$GameboardClass();\n\n\n\n\nclass $bf4e814e9c2d853f$var$PauseClass {\n    #btnContinue = document.querySelector(\".btn__continue\");\n    #btnRestart = document.querySelector(\".btn__restart\");\n    #btnMenu = document.querySelector(\".btn__menu\");\n    #dropIndicator = document.querySelector(\".drop-indicator\");\n    #pauseMenu = document.querySelector(\".pause\");\n    constructor(){\n        this.#btnMenu.addEventListener(\"click\", this.togglePauseMenu.bind(this));\n        this.#pauseMenu.addEventListener(\"click\", this.closePauseMenu.bind(this));\n        this.#btnContinue.addEventListener(\"click\", this.togglePauseMenu.bind(this));\n        this.#btnRestart.addEventListener(\"click\", this.restartGame.bind(this));\n    }\n    togglePauseMenu() {\n        this.#pauseMenu.classList.contains(\"pause-game\") ? (0, $472cb95d11c6e757$export$119d2a93e2780362).startTimer() : (0, $472cb95d11c6e757$export$119d2a93e2780362).stopTimer();\n        this.#pauseMenu.classList.toggle(\"pause-game\");\n        this.#dropIndicator.classList.toggle(\"oscilates\");\n    }\n    closePauseMenu(e) {\n        if (!e.target.classList.contains(\"pause\")) return;\n        this.togglePauseMenu();\n    }\n    restartGame() {\n        (0, $472cb95d11c6e757$export$119d2a93e2780362).reset();\n        this.togglePauseMenu();\n    }\n}\nconst $bf4e814e9c2d853f$export$361fc79199cdc4fa = new $bf4e814e9c2d853f$var$PauseClass();\n\n\n // if (module.hot) module.hot.accept();\n /*\r\nTODO :\r\n*/ \n\n//# sourceMappingURL=game.db12de88.js.map\n","\"use strict\";\n\nvar mapping = {};\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping[id];\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return resolved;\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"jafTj\\\":\\\"game.db12de88.js\\\",\\\"fwfJW\\\":\\\"counter-red-large.1b4f990d.svg\\\",\\\"cx2Hk\\\":\\\"counter-yellow-large.93af5fd3.svg\\\",\\\"934QX\\\":\\\"counter-red-small.ae91ef0e.svg\\\",\\\"4dB29\\\":\\\"counter-yellow-small.a6641bf4.svg\\\",\\\"gUdph\\\":\\\"board-layer-white-large.ecccfb19.svg\\\",\\\"9ppCi\\\":\\\"board-layer-white-small.a9fe7f83.svg\\\",\\\"1mcSd\\\":\\\"turn-background-red.e290ee2b.svg\\\",\\\"6bKVC\\\":\\\"turn-background-yellow.06d012d8.svg\\\",\\\"gsDR2\\\":\\\"marker-red.a1d62ded.svg\\\",\\\"azkAt\\\":\\\"marker-yellow.e5fb14af.svg\\\",\\\"2w5Dh\\\":\\\"rules.b0ba6b5e.js\\\"}\"));","import \"core-js/stable\";\r\nimport \"regenerator-runtime\";\r\nimport \"./logic.js\";\r\nimport \"./gameboard.js\";\r\nimport \"./game.js\";\r\nimport \"./navigation.js\";\r\n\r\n// if (module.hot) module.hot.accept();\r\n\r\n/*\r\nTODO :\r\n*/\r\n","class Logic {\r\n  constructor() {}\r\n\r\n  // Returns an array of indexes of same\r\n  // and consecutive elements (also the string);\r\n  // If not found return false\r\n  // Uses sliding window technique\r\n  containsWinningPosition(arr, length = 4) {\r\n    // Cleans the array\r\n    // const cleanedArr = arr.filter(\r\n    //   (element) => element !== \" \"\r\n    // );\r\n    let result = [];\r\n    for (let r = 0, l = 0; r < arr.length; r++) {\r\n      if (result.length === length) break;\r\n\r\n      if (arr[r] === \" \") {\r\n        result = [];\r\n        l = r;\r\n        continue;\r\n      }\r\n\r\n      if (r === 0) {\r\n        result.push([arr[r].player, arr[r].coords]);\r\n        continue;\r\n      }\r\n\r\n      if (arr[r - 1].player === arr[r].player) {\r\n        result.push([arr[r].player, arr[r].coords]);\r\n        continue;\r\n      }\r\n\r\n      result = [];\r\n      l = r;\r\n      result.push([arr[r].player, arr[r].coords]);\r\n    }\r\n    return result.length === length ? result : false;\r\n  }\r\n\r\n  calcFallTime(y) {\r\n    return Math.sqrt(2 * y) / 7;\r\n  }\r\n\r\n  wait(seconds) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, seconds * 1000);\r\n    });\r\n  }\r\n}\r\n\r\nexport const logics = new Logic();\r\n","import { logics } from \"./logic\";\r\nimport { cellValue, images } from \"./images\";\r\nimport { game } from \"./game\";\r\nimport { images } from \"./images\";\r\n\r\nclass GameboardClass {\r\n  #gameboardDOM = document.querySelector(\".board__content\");\r\n  #gameboardInput = document.querySelector(\".board__input\");\r\n  #dropIndicator = document.querySelector(\r\n    \".drop-indicator\"\r\n  );\r\n  gameboard;\r\n  // Used to stop inputs from happening whenever there is an animation.\r\n  #canInputCells = true;\r\n\r\n  constructor() {\r\n    // this.init(6, 7);\r\n\r\n    // Event listener that registers input\r\n    this.#gameboardInput.addEventListener(\r\n      \"click\",\r\n      this.#clickCell.bind(this)\r\n    );\r\n\r\n    // //////// DEV CODE ///////////////\r\n    // this.dropCell(3, 1, 2);\r\n\r\n    ////////////////////////////////////\r\n  }\r\n\r\n  // Initialize the board.\r\n  // Note that height and width SHOULD NOT BE CHANGED.\r\n  async init(height, width) {\r\n    await this.#clearBoard();\r\n    // Initialize empty gameboard\r\n    this.gameboard = [...Array(height)].map((el) =>\r\n      Array(width).fill(\" \")\r\n    );\r\n\r\n    // Automatically div elements that can be clicked.\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const html = `\r\n        <div class=\"cell__hidden\" data-coords=\"${y},${x}\"></div>\r\n        `;\r\n        this.#gameboardInput.insertAdjacentHTML(\r\n          \"beforeend\",\r\n          html\r\n        );\r\n      }\r\n    }\r\n\r\n    // Enables cell input\r\n    this.#canInputCells = true;\r\n  }\r\n\r\n  #clearBoard() {\r\n    return new Promise(async (resolve) => {\r\n      this.#gameboardInput.innerHTML = \"\";\r\n\r\n      [...this.#gameboardDOM.children].forEach((cell) => {\r\n        cell.style.opacity = \"0\";\r\n      });\r\n\r\n      await logics.wait(0.25);\r\n\r\n      this.#gameboardDOM.innerHTML = \"\";\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  ////////////////////////////////////\r\n\r\n  get #height() {\r\n    return this.gameboard.length;\r\n  }\r\n\r\n  get #width() {\r\n    return this.gameboard[0].length;\r\n  }\r\n\r\n  #rowOf(y, x) {\r\n    return this.gameboard[y];\r\n  }\r\n\r\n  #columnOf(y, x) {\r\n    return [...Array(this.#height)].map(\r\n      (_, i) => this.gameboard[i][x]\r\n    );\r\n  }\r\n\r\n  // Diagonal right is \"\\\" (Down + Right)\r\n  #diagonalRightOf(yCoords, xCoords) {\r\n    let result = [this.gameboard[yCoords][xCoords]];\r\n\r\n    let y = yCoords,\r\n      x = xCoords;\r\n\r\n    // Iterate until topleft -> input (unshift) into array\r\n    while (x > 0 && y > 0) {\r\n      y--;\r\n      x--;\r\n      result.unshift(this.gameboard[y][x]);\r\n    }\r\n\r\n    // Resets the position variables\r\n    y = yCoords;\r\n    x = xCoords;\r\n\r\n    // Iterate until bottomright ->  input (push) into array\r\n    while (x < this.#width - 1 && y < this.#height - 1) {\r\n      y++;\r\n      x++;\r\n      result.push(this.gameboard[y][x]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Diagonal left is \"/\" (Down + Left)\r\n  #diagonalLeftOf(yCoords, xCoords) {\r\n    let result = [this.gameboard[yCoords][xCoords]];\r\n\r\n    let y = yCoords,\r\n      x = xCoords;\r\n\r\n    // Iterate until top right\r\n    while (x < this.#width - 1 && y > 0) {\r\n      y--;\r\n      x++;\r\n      result.unshift(this.gameboard[y][x]);\r\n    }\r\n\r\n    // Resets the position variables\r\n    y = yCoords;\r\n    x = xCoords;\r\n\r\n    // Iterate until bottom left\r\n    while (x > 0 && y < this.#height - 1) {\r\n      y++;\r\n      x--;\r\n      result.push(this.gameboard[y][x]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  ////////////////////////////////////\r\n\r\n  // NOTE : New Cells will always fill the bottom of the column first\r\n  async dropCell(y, x, player) {\r\n    this.#canInputCells = false;\r\n\r\n    // The i >= -1 is so that the loop will go from the height -> -1\r\n    // If it ever hits -1 it means that there are no longer any available space on the column\r\n\r\n    // Checks for the highest available spot on the column\r\n    for (let i = this.#height - 1; i >= -1; i--) {\r\n      // Checks if the board is already filled to the top\r\n      if (i === -1) {\r\n        this.#canInputCells = true;\r\n        return;\r\n      }\r\n\r\n      // If current el on column is empty the continue\r\n      if (this.gameboard[i][x] !== \" \") continue;\r\n\r\n      // If current el IS NOT empty then set it to the y position\r\n      y = i;\r\n      break;\r\n    }\r\n\r\n    // Insert the player input into the object array\r\n    this.gameboard[y][x] = new cellValue(player, [y, x]);\r\n\r\n    // Waits for cell render animation to finish\r\n    await this.#renderCell(y, x, player);\r\n\r\n    // Checks if the recent move created a winning position\r\n    // 0 -> Player // 1 -> Winning Cell Coords\r\n    const winner = this.#checkWin([y, x]);\r\n\r\n    if (winner) {\r\n      this.#showWin(winner);\r\n    } else {\r\n      // Re-enable input\r\n      this.#canInputCells = true;\r\n\r\n      game.switchTurns();\r\n    }\r\n  }\r\n\r\n  async #renderCell(y, x, player) {\r\n    return new Promise((resolve) => {\r\n      const cellColor =\r\n        player === 1 ? images.redCell : images.yellowCell;\r\n      const cellHtml = `\r\n      <div class=\"cell\" data-coords=\"${y},${x}\" data-x=\"${x}\", data-y=\"${y}\" data-player=\"${player}\">\r\n        <img src=${cellColor} alt=\"cell\"/>\r\n      </div>\r\n      `;\r\n\r\n      this.#gameboardDOM.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        cellHtml\r\n      );\r\n\r\n      const newCell = document.querySelector(\r\n        `[data-coords=\"${y},${x}\"]`\r\n      );\r\n\r\n      newCell.style.setProperty(\"--x\", x);\r\n      newCell.style.setProperty(\"--y\", y);\r\n      newCell.style.setProperty(\r\n        \"--fall-time\",\r\n        `${logics.calcFallTime(y)}s`\r\n      );\r\n\r\n      newCell.addEventListener(\"animationend\", resolve);\r\n    });\r\n  }\r\n\r\n  #clickCell(e) {\r\n    const cell = e.target.closest(\".cell__hidden\");\r\n\r\n    if (!cell) return;\r\n\r\n    if (!this.#canInputCells) {\r\n      return;\r\n    }\r\n\r\n    const [y, x] = cell.dataset.coords\r\n      .split(\",\")\r\n      .map((el) => Number(el));\r\n\r\n    this.dropCell(y, x, game.player);\r\n  }\r\n\r\n  // ////////////////////////////////\r\n\r\n  //prettier-ignore\r\n  #checkWin(recentPlacement) {\r\n    const [y, x] = recentPlacement;\r\n\r\n    // Checks winning conditions.\r\n    const result = \r\n      logics.containsWinningPosition(this.#rowOf(y, x)) ||\r\n      logics.containsWinningPosition(this.#columnOf(y, x)) ||\r\n      logics.containsWinningPosition(this.#diagonalRightOf(y, x)) ||\r\n      logics.containsWinningPosition(this.#diagonalLeftOf(y, x)) || \r\n      false;\r\n\r\n    const draw = this.#checkDraw();\r\n    if(draw) return\r\n\r\n    return result;\r\n  }\r\n\r\n  async #showWin(winner = \"tie\") {\r\n    // If the game results in a draw :\r\n    if (winner === \"tie\") {\r\n      game.displayWinScreen();\r\n      return;\r\n    }\r\n    // creates an array with the only the coordinates of the winning cells.\r\n    const winningCoords = winner.map((el) => el[1]);\r\n\r\n    // Hide dropIndicator\r\n    this.#dropIndicator.classList.add(\"hidden\");\r\n\r\n    // Mark & animate the winning cells\r\n    await this.#markWinningCell(winningCoords);\r\n    await logics.wait(0.2);\r\n\r\n    // Add point\r\n    const playerWinner = winner[0][0];\r\n    game.addPointToPlayer(playerWinner);\r\n\r\n    // Stop timer\r\n    game.stopTimer();\r\n\r\n    game.displayWinScreen(playerWinner);\r\n  }\r\n\r\n  #markWinningCell(winner) {\r\n    return new Promise((resolve) => {\r\n      let i = winner.length - 1;\r\n      const addMarkings = setInterval(() => {\r\n        // get data\r\n        const [y, x] = winner[i];\r\n        const cell = document.querySelector(\r\n          `[data-coords=\"${y},${x}\"]`\r\n        );\r\n\r\n        // add class\r\n        cell.classList.add(\"cell__win\");\r\n\r\n        // decrement counter\r\n        i--;\r\n\r\n        // stopping condition\r\n        if (i >= 0) return;\r\n        clearInterval(addMarkings);\r\n        resolve();\r\n      }, 200);\r\n    });\r\n  }\r\n\r\n  #checkDraw() {\r\n    if (\r\n      !this.gameboard.every((el) =>\r\n        el.every((el) => el !== \" \")\r\n      )\r\n    )\r\n      return;\r\n    this.#showWin();\r\n    return true;\r\n  }\r\n}\r\n\r\nexport const gameboard = new GameboardClass();\r\n","import redCellLarge from \"../images/counter-red-large.svg\";\r\nimport yellowCellLarge from \"../images/counter-yellow-large.svg\";\r\nimport redCellSmall from \"../images/counter-red-small.svg\";\r\nimport yellowCellSmall from \"../images/counter-yellow-small.svg\";\r\nimport boardWhiteLarge from \"../images/board-layer-white-large.svg\";\r\nimport boardWhiteSmall from \"../images/board-layer-white-small.svg\";\r\n\r\n// Handles the images (changes on certain viewports)\r\nclass ResponsiveClass {\r\n  #boardContent = document.querySelector(\".board__content\");\r\n  #boardWhiteDOM = document.querySelector(\".board__white\");\r\n  #currentViewport;\r\n  constructor() {\r\n    this.#detectViewport();\r\n\r\n    // Listen to any change in viewport\r\n    window.addEventListener(\r\n      \"resize\",\r\n      this.#detectViewport.bind(this)\r\n    );\r\n  }\r\n\r\n  #detectViewport() {\r\n    const viewportNow =\r\n      window.innerWidth < 500 ? \"MOBILE\" : \"DESKTOP\";\r\n\r\n    // If there is no change in viewport then return\r\n    if (this.#currentViewport === viewportNow) return;\r\n\r\n    // Sets the viewport on the object itself\r\n    this.#currentViewport = viewportNow;\r\n\r\n    // Change the cell image based on the viewport size\r\n    this.#changeImages();\r\n  }\r\n\r\n  #changeImages() {\r\n    // Change Cells\r\n    [...this.#boardContent.children].forEach((cell) => {\r\n      const player = cell.dataset.player;\r\n\r\n      cell.children[0].src =\r\n        player === \"1\" ? this.redCell : this.yellowCell;\r\n    });\r\n\r\n    // Change board\r\n    this.#boardWhiteDOM.src = this.boardWhite;\r\n  }\r\n\r\n  get boardWhite() {\r\n    return this.#currentViewport === \"DESKTOP\"\r\n      ? boardWhiteLarge\r\n      : boardWhiteSmall;\r\n  }\r\n\r\n  get redCell() {\r\n    return this.#currentViewport === \"DESKTOP\"\r\n      ? redCellLarge\r\n      : redCellSmall;\r\n  }\r\n\r\n  get yellowCell() {\r\n    return this.#currentViewport === \"DESKTOP\"\r\n      ? yellowCellLarge\r\n      : yellowCellSmall;\r\n  }\r\n}\r\n\r\nexport class cellValue {\r\n  constructor(player, coords) {\r\n    this.player = player;\r\n    this.coords = coords;\r\n  }\r\n}\r\n\r\nexport const images = new ResponsiveClass();\r\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"fwfJW\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"cx2Hk\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"934QX\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4dB29\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"gUdph\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"9ppCi\")).toString();","import { gameboard } from \"./gameboard\";\r\nimport redTurnImage from \"../images/turn-background-red.svg\";\r\nimport yellowTurnImage from \"../images/turn-background-yellow.svg\";\r\nimport redTurnIndicator from \"../images/marker-red.svg\";\r\nimport yellowTurnIndicator from \"../images/marker-yellow.svg\";\r\n\r\nclass GameClass {\r\n  // At the start of the game, it is player 1's turn\r\n  #boardInput = document.querySelector(\".board__input\");\r\n\r\n  #playerTimer = document.querySelector(\r\n    \".current__player--timer\"\r\n  );\r\n\r\n  #playerTurnText = document.querySelector(\r\n    \".current__player--indicator\"\r\n  );\r\n\r\n  #playerTurnImage = document.querySelector(\r\n    \".current__player--image\"\r\n  );\r\n\r\n  #playerTurnContainer = document.querySelector(\r\n    \".current__player\"\r\n  );\r\n\r\n  #dropIndicator = document.querySelector(\r\n    \".drop-indicator\"\r\n  );\r\n\r\n  #backdrop = document.querySelector(\".backdrop\");\r\n  #backdropBottom = document.querySelector(\r\n    \".backdrop__bottom\"\r\n  );\r\n\r\n  #player1PointDOM = document.querySelector(\r\n    \".score[data-player='1']\"\r\n  );\r\n  #player2PointDOM = document.querySelector(\r\n    \".score[data-player='2']\"\r\n  );\r\n\r\n  #playerWinScreen = document.querySelector(\r\n    \".player__winner\"\r\n  );\r\n\r\n  #restartBtn = document.querySelector(\".btn__restart\");\r\n\r\n  #playAgainBtn = document.querySelector(\".btn__again\");\r\n\r\n  // Player state\r\n  #currentPlayer = 1;\r\n\r\n  //Timer\r\n  #time = 30;\r\n  #timer;\r\n\r\n  // Points\r\n  #pointPlayer1 = 0;\r\n  #pointPlayer2 = 0;\r\n\r\n  constructor() {\r\n    this.#restartBtn.addEventListener(\r\n      \"click\",\r\n      this.#resetGame.bind(this)\r\n    );\r\n\r\n    this.#playAgainBtn.addEventListener(\r\n      \"click\",\r\n      this.#restartGame.bind(this)\r\n    );\r\n\r\n    // Start game after everything finishes loading.\r\n    window.addEventListener(\"DOMContentLoaded\", () => {\r\n      this.startGame();\r\n    });\r\n  }\r\n\r\n  startGame() {\r\n    // Clears the board\r\n    gameboard.init(6, 7);\r\n\r\n    // Sets the timer\r\n    this.#playerTimer.textContent = `${this.#time}S`;\r\n\r\n    // Sets the timer\r\n    this.startTimer();\r\n    this.#setTurnIndicator();\r\n\r\n    // Display the drop indicator\r\n    this.#dropIndicator.classList.remove(\"hidden\");\r\n\r\n    // set backdrop color to default\r\n    this.#backdrop.classList.remove(\"yellow\");\r\n    this.#backdrop.classList.remove(\"red\");\r\n    this.#backdropBottom.classList.remove(\"yellow\");\r\n    this.#backdropBottom.classList.remove(\"red\");\r\n\r\n    // Sets the player score\r\n    this.#player1PointDOM.textContent = this.#pointPlayer1;\r\n    this.#player2PointDOM.textContent = this.#pointPlayer2;\r\n\r\n    // Adds the move event listener (for top indicator)\r\n    this.#boardInput.addEventListener(\r\n      \"mousemove\",\r\n      this.#moveDropIndicator.bind(this)\r\n    );\r\n  }\r\n\r\n  startTimer() {\r\n    this.#timer = setInterval(() => {\r\n      // Reduce timer\r\n      this.#time--;\r\n\r\n      // Updates the DOM timer with the object timer\r\n      this.#playerTimer.textContent = `${this.#time}S`;\r\n\r\n      // Stop timer if it hits 0\r\n      if (this.#time !== -1) return;\r\n      this.stopTimer();\r\n      this.switchTurns();\r\n    }, 1000);\r\n  }\r\n\r\n  stopTimer() {\r\n    clearInterval(this.#timer);\r\n  }\r\n\r\n  #restartGame() {\r\n    // Resets the timer to default position\r\n    this.#time = 30;\r\n    this.#playerTimer.textContent = `${this.#time}S`;\r\n    this.stopTimer();\r\n\r\n    // Initializes the game\r\n    this.startGame();\r\n\r\n    // Toggle from the botto win screen to the turn screen\r\n    this.#playerTurnContainer.classList.remove(\"hidden\");\r\n    this.#playerTurnContainer.classList.remove(\"disappear\");\r\n    this.#playerWinScreen.classList.add(\"hidden\");\r\n    this.#playerWinScreen.classList.remove(\"appear\");\r\n\r\n    // Remove player icon animation\r\n    //prettier-ignore\r\n    document\r\n      .querySelector(`.player__score[data-player=\"1\"] > .player__icon`)\r\n      .classList.remove(\"iconAnimate\");\r\n    //prettier-ignore\r\n    document\r\n      .querySelector(`.player__score[data-player=\"2\"] > .player__icon`)\r\n      .classList.remove(\"iconAnimate\");\r\n  }\r\n\r\n  // Restart + Reset score\r\n  #resetGame() {\r\n    this.#pointPlayer1 = 0;\r\n    this.#pointPlayer2 = 0;\r\n    this.#restartGame();\r\n  }\r\n\r\n  // API purposes\r\n  restart() {\r\n    this.#restartGame();\r\n  }\r\n\r\n  reset() {\r\n    this.#resetGame();\r\n  }\r\n\r\n  switchTurns() {\r\n    // Switch player turn\r\n    this.#currentPlayer = this.#currentPlayer === 1 ? 2 : 1;\r\n\r\n    // Restarts the timer\r\n    clearInterval(this.#timer);\r\n    this.#time = 30;\r\n    this.#playerTimer.textContent = `${this.#time}S`;\r\n    this.startTimer();\r\n\r\n    // Display the current player\r\n    this.#setTurnIndicator();\r\n  }\r\n\r\n  addPointToPlayer(player) {\r\n    player === 1\r\n      ? this.#pointPlayer1++\r\n      : this.#pointPlayer2++;\r\n\r\n    // Sets the player score\r\n    this.#player1PointDOM.textContent = this.#pointPlayer1;\r\n    this.#player2PointDOM.textContent = this.#pointPlayer2;\r\n  }\r\n\r\n  // Switch the turn indicator to current player\r\n  #setTurnIndicator() {\r\n    // Change text\r\n    this.#playerTurnText.textContent = `PLAYER ${\r\n      this.#currentPlayer\r\n    }'S TURN`;\r\n\r\n    this.#playerTurnText.style.color =\r\n      this.#currentPlayer === 1\r\n        ? \"var(--clr-white)\"\r\n        : \"var(--clr-black)\";\r\n\r\n    this.#playerTimer.style.color =\r\n      this.#currentPlayer === 1\r\n        ? \"var(--clr-white)\"\r\n        : \"var(--clr-black)\";\r\n\r\n    // Change image\r\n    this.#playerTurnImage.src =\r\n      this.#currentPlayer === 1\r\n        ? redTurnImage\r\n        : yellowTurnImage;\r\n\r\n    this.#dropIndicator.src =\r\n      this.#currentPlayer === 1\r\n        ? redTurnIndicator\r\n        : yellowTurnIndicator;\r\n  }\r\n\r\n  #moveDropIndicator(e) {\r\n    const cell = e.target.closest(\".cell__hidden\");\r\n\r\n    if (!cell) return;\r\n\r\n    const x = cell.dataset.coords.split(\",\")[1];\r\n\r\n    this.#dropIndicator.style.setProperty(\"--x\", x);\r\n  }\r\n\r\n  displayWinScreen(playerWinner = \"tie\") {\r\n    // switch from turn display to win display\r\n    this.#playerTurnContainer.classList.add(\"hidden\");\r\n    this.#playerWinScreen.classList.remove(\"hidden\");\r\n\r\n    if (playerWinner === \"tie\") {\r\n      this.#playerWinScreen.querySelector(\r\n        \"p\"\r\n      ).textContent = `IT'S A`;\r\n      this.#playerWinScreen.querySelector(\r\n        \"h2\"\r\n      ).textContent = \"DRAW\";\r\n\r\n      return;\r\n    }\r\n\r\n    // Change the players name\r\n    this.#playerWinScreen.querySelector(\r\n      \"p\"\r\n    ).textContent = `PLAYER ${playerWinner}`;\r\n\r\n    this.#backdrop.classList.add(\r\n      playerWinner === 1 ? \"red\" : \"yellow\"\r\n    );\r\n    this.#backdropBottom.classList.add(\r\n      playerWinner === 1 ? \"red\" : \"yellow\"\r\n    );\r\n\r\n    // Animate Player Icon Bouncing\r\n    const icon = document.querySelector(\r\n      `.player__score[data-player=\"${playerWinner}\"] > .player__icon`\r\n    );\r\n    icon.classList.add(\"iconAnimate\");\r\n  }\r\n\r\n  get player() {\r\n    return this.#currentPlayer;\r\n  }\r\n}\r\n\r\nexport const game = new GameClass();\r\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1mcSd\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"6bKVC\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"gsDR2\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"azkAt\")).toString();","import { game } from \"./game\";\r\n\r\nclass PauseClass {\r\n  #btnContinue = document.querySelector(\".btn__continue\");\r\n  #btnRestart = document.querySelector(\".btn__restart\");\r\n  #btnMenu = document.querySelector(\".btn__menu\");\r\n  #dropIndicator = document.querySelector(\r\n    \".drop-indicator\"\r\n  );\r\n  #pauseMenu = document.querySelector(\".pause\");\r\n  constructor() {\r\n    this.#btnMenu.addEventListener(\r\n      \"click\",\r\n      this.togglePauseMenu.bind(this)\r\n    );\r\n\r\n    this.#pauseMenu.addEventListener(\r\n      \"click\",\r\n      this.closePauseMenu.bind(this)\r\n    );\r\n\r\n    this.#btnContinue.addEventListener(\r\n      \"click\",\r\n      this.togglePauseMenu.bind(this)\r\n    );\r\n\r\n    this.#btnRestart.addEventListener(\r\n      \"click\",\r\n      this.restartGame.bind(this)\r\n    );\r\n  }\r\n\r\n  togglePauseMenu() {\r\n    this.#pauseMenu.classList.contains(\"pause-game\")\r\n      ? game.startTimer()\r\n      : game.stopTimer();\r\n    this.#pauseMenu.classList.toggle(\"pause-game\");\r\n    this.#dropIndicator.classList.toggle(\"oscilates\");\r\n  }\r\n\r\n  closePauseMenu(e) {\r\n    if (!e.target.classList.contains(\"pause\")) return;\r\n    this.togglePauseMenu();\r\n  }\r\n\r\n  restartGame() {\r\n    game.reset();\r\n    this.togglePauseMenu();\r\n  }\r\n}\r\n\r\nexport const menuPause = new PauseClass();\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","i","length","resolved","JSON","parse","$f90dcfcb5d2eec26$export$9db256c878ff5dca","constructor","containsWinningPosition","arr","result","r","player","push","coords","calcFallTime","y","Math","sqrt","wait","seconds","Promise","resolve","setTimeout","$5a1cf74312d50894$exports","URL","url","toString","$addae391ba728354$exports","$8cf1fddada993cad$exports","$47ed43296e597087$exports","$bc6e4839d4562229$exports","$a9852a3dd3340b30$exports","$c5c6c3e8862acf74$var$ResponsiveClass","boardContent","document","querySelector","boardWhiteDOM","currentViewport","detectViewport","addEventListener","bind","viewportNow","innerWidth","changeImages","children","forEach","cell","dataset","src","redCell","yellowCell","boardWhite","$c5c6c3e8862acf74$export$b691916706e0e9cc","$c5c6c3e8862acf74$export$6c746a5570b8b35c","$871f72d88f93c184$exports","$382bfb8594a9b0b8$exports","$be27cafe66611cda$exports","$b72656ca5a11d622$exports","$472cb95d11c6e757$var$GameClass","boardInput","playerTimer","playerTurnText","playerTurnImage","playerTurnContainer","dropIndicator","backdrop","backdropBottom","player1PointDOM","player2PointDOM","playerWinScreen","restartBtn","playAgainBtn","currentPlayer","time","timer","pointPlayer1","pointPlayer2","resetGame","restartGame","startGame","$103370147f467e2d$export$e14f22bc981ebf44","textContent","startTimer","setTurnIndicator","classList","remove","moveDropIndicator","setInterval","stopTimer","switchTurns","clearInterval","add","restart","reset","addPointToPlayer","style","color","target","closest","x","split","setProperty","displayWinScreen","playerWinner","icon","$472cb95d11c6e757$export$119d2a93e2780362","$103370147f467e2d$var$GameboardClass","gameboardDOM","gameboardInput","gameboard","canInputCells","clickCell","height","width","clearBoard","Array","map","el","fill","html","insertAdjacentHTML","innerHTML","opacity","rowOf","columnOf","_","diagonalRightOf","yCoords","xCoords","unshift","diagonalLeftOf","dropCell","renderCell","winner","checkWin","showWin","cellColor","cellHtml","newCell","Number","recentPlacement","draw","checkDraw","winningCoords","markWinningCell","addMarkings","every","$bf4e814e9c2d853f$var$PauseClass","btnContinue","btnRestart","btnMenu","pauseMenu","togglePauseMenu","closePauseMenu","contains","toggle"],"version":3,"file":"game.db12de88.js.map"}